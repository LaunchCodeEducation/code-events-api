Roles

namespace CodeEventsAPI.Models {
  public enum MemberRole {
    Owner, // event.view, event.edit, event.delete, event.member.view, event.member.remove
    Member // event.view, event.member.view:username, event.member.remove:self
  }

EventBriefDTO
    title
    date
    links:
        event

EventFullDTO (role: member, owner)
    all: id
    all: title
    all: date
    all: description
    all: owner
    links:
        members: @member, @owner
        leave: @member
        cancel: @owner

        
MemberDTO (roles: member, owner)
    username: all
    role: all
    email: @owner
    links:
        remove: @owner
    
CodeEvent + Member DTO Strategy
    - ToDTO(Member requestingMember)
    - check their Role
    - build respective DTO based on Role + rules

entrypoint: /api/events

GET 
    returns: 200; EventBriefDTO
    roles: @user

POST 
    returns: 201; EventBriefDTO
    roles: @user

GET /{codeEventId}
    role: @user
    returns: 403;

    role: @member
    returns: 200; EventFullDTO

    role: @owner
    returns: 200; EventFullDTO
    
POST /{codeEventId}/members
    role: @user
    returns: 204;

    role: @member
    returns: 400;
    
    role: @owner
    returns: 400; 

GET /{codeEventId}/members
    role: @user
    returns: 403;

    role: @member
    returns: 200; member-list (usernames, roles) (just hyperlinks (view) (leave)
    )

    role: @owner
    returns: 200; member-list (usernames & emails) (just hyperlinks (view), (cancel))
    
TODO: create
DELETE /{codeEventId}/members/{memberId?}
    memberId: optional param to support @member and @owner consumption

    @user: 403
    @member:
        get member id from authed user
    @owner:
        204
     


User


Owner


Member